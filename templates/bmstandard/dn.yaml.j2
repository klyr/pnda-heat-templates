heat_template_version: 2014-10-16

parameters:
  Flavor:
    description: Flavor of the datanode server
    type: string
    default: m1.xlarge
  KeyName:
    description: Name of an existing ssh keypair
    type: string
{%if create_network is equalto 1 %}
  PrivateNet:
    description: Private network for pnda deployment
    type: string
  PrivateSubnet:
    description: Private network for pnda deployment
    type: string
  pnda_secgroup:
    type: string
  sec_group:
    type: string
{%endif%}
  Image:
    type: string
  name:
    type: string
  SaltmasterIP:
    type: string
  NodeIndex:
    type: number
    default: 0
  cluster_name:
    type: string
  pnda_flavor:
    type: string
{%if create_volumes is equalto 1 %}
  volume_size:
    type: number
    default: 200
  mountpoint:
    type: string
    default: /dev/vdc
  logvolume_size:
    type: number
    default: 250
  log_mountpoint:
    type: string
    default: /dev/vdb
{%endif%}
  signal_transport:
    type: string
  software_config_transport:
    type: string


resources:
{%if create_network is equalto 1 %}
  port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: PrivateNet }
      fixed_ips:
        - subnet_id: { get_param: PrivateSubnet }
      security_groups: [{ get_param: sec_group }]
{%endif%}
  install_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template: {get_file: scripts/dn_install.sh }
          params:
            $flavor$: { get_param: pnda_flavor }
            $master_ip$: { get_param: SaltmasterIP }
            $pnda_cluster$: { get_param: cluster_name }
{%if create_volumes is equalto 1 %}
            $volume_dev$: { get_param: log_mountpoint }
{%endif%}
            $cloudera_role$: 'DATANODE'
  install_deployment:
    type: OS::Heat::SoftwareDeployment
{%if create_volumes is equalto 1 %}
    depends_on: [ volume_attachment, logvolume_attachment ]
{%endif%}
    properties:
      signal_transport: { get_param: signal_transport }
      config:
        get_resource: install_config
      server:
        get_resource: server

  server:
    type: OS::Nova::Server
    properties:
      name: { get_param: name }
      image: { get_param: Image }
      flavor: { get_param: Flavor }
      key_name: { get_param: KeyName }
{%if create_network is equalto 1 %}
      networks: [{ network: {get_param: PrivateNet}}]
      security_groups: [{ get_param: sec_group }, { get_param: pnda_secgroup }]
{%endif%}
      software_config_transport: { get_param: software_config_transport }
      user_data_format: SOFTWARE_CONFIG
      config_drive: True

{%if create_volumes is equalto 1 %}
  volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      description: Volume for datanode
  volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: volume }
      instance_uuid: { get_resource: server }
      mountpoint: { get_param: mountpoint }
  logvolume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: logvolume_size }
      description: Volume for datanode logs
  logvolume_attachment:
    type: OS::Cinder::VolumeAttachment
    depends_on: volume_attachment
    properties:
      volume_id: { get_resource: logvolume }
      instance_uuid: { get_resource: server }
      mountpoint: { get_param: log_mountpoint }
{%endif%}

outputs:
  port_resource:
    description: Heat resource handle for the Neutron port
    value:
      { get_resource: port }
  server_resource:
    description: Heat resource handle for the Nova compute server
    value:
      {get_resource: server}
  hosts_entry:
    description: >
      Server's IP address and hostname in the /etc/hosts format
    value:
      str_replace:
        template: |
          PRIMARYIP PRIMARYHOST
        params:
          PRIMARYIP: {get_attr: [server, first_address]}
          PRIMARYHOST: {get_attr: [server, name]}
